/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'psyken' at '14. 3. 5 오후 3:46' with Gradle 2.5
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/1.11/userguide/tutorial_java_projects.html
 */
 
// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'eclipse'
apply plugin: 'eclipse-wtp'
 
// JAVA Version 1.7
sourceCompatibility = 1.7
// 개발한 애플리케이션 버전
version = '1.0'

/* Eclipse 환경설정.
eclipse {
    classpath { downloadSources = true }
    // workspace/{project}/.settings 폴더를 설정한다.
    wtp {
        // .settings 폴더의 org.eclipse.wst.common.component 파일을 설정한다.
        component {
            //contextPath = project.name // 원하는 contextPath 지정. 단, 빈 컨텍스트패스는 "/" 로 지정
            contextPath = "" // 원하는 contextPath 지정. 단, 빈 컨텍스트패스는 "/" 로 지정
        }
        // .settings 폴더의 org.eclipse.wst.common.project.facet.core.xml 파일을 설정한다.
        facet {
            facet name: "jst.web" , version: "2.5" // Servlet Spec Version 지정
            //facet name: "jst.java" , version: "1.6" // Java Version 지정, 1.7 ...
            //facet name: "wst.jsdt.web" , version: "1.0"   // Javascript 지정, 1.0
        }
    }
}  */
 
// 메이븐 Central 저장소 사용
repositories {
    mavenCentral()
}
 
// dependency 버전 정보
def version = [
spring: '3.2.2.RELEASE'
, junit: '4.11'
, servletApi: '3.0.1'
, jstl: '1.2'
, slf4j: '1.7.6'
, mockito: '1.9.0'
, cglib: '2.2.2'
, logback: '1.0.6'
]
 
// In this section you declare the dependencies for your production and test code
// 의존성 설정
dependencies {
    compile "org.springframework:spring-webmvc:${version.spring}",
          	"org.springframework:spring-instrument:${version.spring}",
          	
          	'org.springframework:spring-context:${version.spring}',
          	'org.springframework:spring-jdbc:3.2.2.RELEASE',
          	'org.hsqldb:hsqldb:2.3.3',
          	
          	'commons-dbcp:commons-dbcp:1.4',
          	'org.mybatis:mybatis:3.3.0',
          	'org.mybatis:mybatis-spring:1.2.3',
          	
          	"cglib:cglib-nodep:${version.cglib}",
            "log4j:log4j:1.2.17",
            "commons-fileupload:commons-fileupload:1.3.1",
            "org.perf4j:perf4j:0.9.16",
            "org.aspectj:aspectjweaver:1.8.6",
            "commons-logging:commons-logging:1.2"
            //"ch.qos.logback:logback-classic:${version.logback}",
            //"org.slf4j:slf4j-api:${version.slf4j}",
 
  providedCompile "javax.servlet:javax.servlet-api:${version.servletApi}"
 
  testCompile "org.springframework:spring-test:${version.spring}",
              "junit:junit:${version.junit}",
              "org.mockito:mockito-core:${version.mockito}"
                                         
  runtime "javax.servlet:jstl:${version.jstl}"
}
 
// logback(slf4j)를 사용하기 때문에 모든 의존성에서 commons-logging는 제외
//[configurations.runtime, configurations.default]*.exclude(module: 'commons-logging')
 
// JAVA 컴파일시 인코딩 설정
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
 
// TEST 설정
test {
    jvmArgs = ['-ea', '-Xmx256m']
    logging.captureStandardOutput(LogLevel.INFO)
    //testReport = false
    reports.html.enabled = false
}
 
// 프로젝트 초기화
// 1. java source directory 생성 : src/main/java, src/test/java
// 2. resource directory 생성    : src/main/resource, src/test/resource
// 3. web source directory 생성  : src/main/webapp, src/main/webapp/WEB-INF
task initProject(description: 'initialize project') << {
    def createDir = {
        println "create source directory: $it"
        //it.mkdirs()
        mkdir(it)
    }
    sourceSets*.java.srcDirs*.each createDir
    sourceSets*.resources.srcDirs*.each createDir
    createDir webAppDir
    createDir new File(webAppDir, '/WEB-INF')
}
 